// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  firstname         String?
  lastname          String?
  username          String?   @unique
  email             String    @unique
  emailVerifiedAt   DateTime? @map("email_verified_at")
  password          String
  countryCode       String?   @map("country_code")
  mobile            String?
  refBy             String?   @map("ref_by") @db.ObjectId
  balance           Float     @default(0.00)
  image             String?
  address           Json?
  status            Int       @default(1) 
  kv                Int       @default(0) 
  ev                Int       @default(0) 
  sv                Int       @default(0) 
  regStep           Int       @default(0) @map("reg_step") 
  verCode           String?   @map("ver_code")
  verCodeSendAt     DateTime? @map("ver_code_send_at")
  tsc               String?
  banReason         String?   @map("ban_reason")
  rememberToken     String?   @map("remember_token")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  orders            Order[]
  transactions      Transaction[]
  deposits          Deposit[]
  appliedCoupons    AppliedCoupon[]
  loginLogs         UserLogin[]
  productReviews    ProductReview[]
  carts             Cart[]
  wishlists         Wishlist[]
  supportTickets    SupportTicket[]

  @@map("users")
}

model Admin {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  username      String    @unique
  emailVerifiedAt DateTime? @map("email_verified_at")
  image         String?
  password      String
  rememberToken String?   @map("remember_token")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("admins")
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  parentId    String?   @map("parent_id") @db.ObjectId
  name        String
  slug        String    @unique
  image       String?
  icon        String?
  description String?   
  metaTitle   String?   @map("meta_title")
  metaDescription String? @map("meta_description")
  metaKeywords Json?    @map("meta_keywords")
  visibility  Int       @default(1) 
  isSpecial   Int       @default(0) @map("is_special") 
  status      Int       @default(1) 
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  parent      Category? @relation("CategoryParent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Category[] @relation("CategoryParent")
  productIds  String[]  @db.ObjectId
  products    Product[] @relation(fields: [productIds], references: [id])

  @@map("categories")
}

model Brand {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  image     String?
  isTop     Int       @default(0) @map("is_top") 
  status    Int       @default(1) 
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  products  Product[]

  @@map("brands")
}

model Product {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  slug                String    @unique
  model               String?
  summary             String?   
  description         String?   
  extraDescriptions   Json?     @map("extra_descriptions")
  specification       Json?
  brandId             String    @map("brand_id") @db.ObjectId
  sku                 String?
  price               Float   
  discountType        Int       @default(1) @map("discount_type") 
  discount            Float     @default(0.00) 
  discountedPrice     Float     @default(0.00) @map("discounted_price") 
  quantity            Int       @default(0)
  sold                Int       @default(0)
  minimumBuyQty       Int       @default(1) @map("minimum_buy_qty")
  stockStatus         Int       @default(1) @map("stock_status") 
  track               Int       @default(1) 
  featured            Int       @default(0) 
  todaysDeal          Int       @default(0) @map("todays_deal") 
  status              Int       @default(1) 
  isFeatured          Int       @default(0) @map("is_featured") 
  isSlider            Int       @default(0) @map("is_slider") 
  mainImage           String?   @map("main_image")
  hoverImage          String?   @map("hover_image")
  metaTitle           String?   @map("meta_title")
  metaDescription     String?   @map("meta_description")
  metaKeywords        Json?     @map("meta_keywords")
  digitalItem         String?   @map("digital_item")
  digitalFile         String?   @map("digital_file")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")
  deletedAt           DateTime? @map("deleted_at")

  // Relations
  brand               Brand     @relation(fields: [brandId], references: [id])
  categoryIds         String[]  @db.ObjectId
  categories          Category[] @relation(fields: [categoryIds], references: [id])
  images              ProductImage[]
  stocks              ProductStock[]
  reviews             ProductReview[]
  assignAttributes    AssignProductAttribute[]
  orderDetails        OrderDetail[]
  carts               Cart[]
  wishlists           Wishlist[]
  offerIds            String[]  @db.ObjectId
  offers              Offer[]   @relation(fields: [offerIds], references: [id])
  couponIds           String[]  @db.ObjectId
  coupons             Coupon[]  @relation(fields: [couponIds], references: [id])

  @@map("products")
}

model ProductImage {
  id                        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId                 String  @map("product_id") @db.ObjectId
  assignProductAttributeId  String  @default("") @map("assign_product_attribute_id") @db.ObjectId
  image                     String

  // Relations
  product                   Product @relation(fields: [productId], references: [id])

  @@map("product_images")
}

model ProductStock {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @map("product_id") @db.ObjectId
  quantity  Int
  unitPrice Float    @map("unit_price") 
  sku       String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  product   Product  @relation(fields: [productId], references: [id])

  @@map("product_stocks")
}

model ProductReview {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @map("product_id") @db.ObjectId
  userId    String   @map("user_id") @db.ObjectId
  rating    Int
  review    String?  
  status    Int      @default(1) 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("product_reviews")
}

model ProductAttribute {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  status    Int      @default(1) 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  assignedProducts AssignProductAttribute[]

  @@map("product_attributes")
}

model AssignProductAttribute {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  productId         String   @map("product_id") @db.ObjectId
  productAttributeId String  @map("product_attribute_id") @db.ObjectId
  value             String
  extraPrice        Float    @default(0.00) @map("extra_price") 
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  product           Product         @relation(fields: [productId], references: [id])
  productAttribute  ProductAttribute @relation(fields: [productAttributeId], references: [id])

  @@map("assign_product_attributes")
}

model Order {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  userId          String    @map("user_id") @db.ObjectId
  orderNumber     String    @unique @map("order_number")
  totalAmount     Float     @map("total_amount") 
  shippingCharge  Float     @default(0.00) @map("shipping_charge") 
  shippingMethod  String?   @map("shipping_method")
  couponDiscount  Float     @default(0.00) @map("coupon_discount") 
  status          Int       @default(0) 
  paymentStatus   Int       @default(0) @map("payment_status") 
  deliveryAddress Json?     @map("delivery_address")
  billingAddress  Json?     @map("billing_address")
  digitalItem     Int       @default(0) @map("digital_item") 
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  user            User      @relation(fields: [userId], references: [id])
  orderDetails    OrderDetail[]
  appliedCoupon   AppliedCoupon?
  deposit         Deposit?

  @@map("orders")
}

model OrderDetail {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String  @map("order_id") @db.ObjectId
  productId   String  @map("product_id") @db.ObjectId
  quantity    Int
  unitPrice   Float   @map("unit_price") 
  totalPrice  Float   @map("total_price") 
  productInfo Json?   @map("product_info")

  // Relations
  order       Order   @relation(fields: [orderId], references: [id])
  product     Product @relation(fields: [productId], references: [id])

  @@map("order_details")
}

model Cart {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String?  @map("user_id") @db.ObjectId
  sessionId   String?  @map("session_id")
  productId   String   @map("product_id") @db.ObjectId
  attributes  Json?
  quantity    Int      @default(1)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user        User?    @relation(fields: [userId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])

  @@map("carts")
}

model Wishlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @map("user_id") @db.ObjectId
  productId String   @map("product_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("wishlists")
}

model Coupon {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  code          String    @unique
  type          Int        // 1 = percentage, 2 = fixed
  discount      Float   
  minimumAmount Float     @default(0.00) @map("minimum_amount") 
  maximumAmount Float     @default(0.00) @map("maximum_amount") 
  startDate     DateTime  @map("start_date")
  endDate       DateTime  @map("end_date")
  usageLimit    Int       @default(0) @map("usage_limit")
  used          Int       @default(0)
  status        Int       @default(1) 
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  productIds      String[]  @db.ObjectId
  products        Product[] @relation(fields: [productIds], references: [id])
  appliedCoupons  AppliedCoupon[]

  @@map("coupons")
}

model AppliedCoupon {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @map("user_id") @db.ObjectId
  orderId   String   @unique @map("order_id") @db.ObjectId
  couponId  String   @map("coupon_id") @db.ObjectId
  discount  Float  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])
  coupon    Coupon   @relation(fields: [couponId], references: [id])

  @@map("applied_coupons")
}

model Offer {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String    @unique
  image       String?
  discount    Float   
  discountType Int      @map("discount_type") 
  startDate   DateTime  @map("start_date")
  endDate     DateTime  @map("end_date")
  status      Int       @default(1) 
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  productIds  String[]  @db.ObjectId
  products    Product[] @relation(fields: [productIds], references: [id])

  @@map("offers")
}

model ShippingMethod {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  duration    String?
  charge      Float
  status      Int      @default(1)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("shipping_methods")
}

model Gateway {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  formId      Int      @map("form_id")
  code        String   @unique
  name        String
  alias       String?
  status      Int      @default(1) 
  gatewayParameters Json? @map("gateway_parameters")
  supportedCurrencies String? @map("supported_currencies")
  crypto      Int      @default(0) 
  extraInfo   Json?    @map("extra_info")
  description String?  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  currencies  GatewayCurrency[]

  @@map("gateways")
}

model GatewayCurrency {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  currency      String
  symbol        String
  methodCode    String  @map("method_code") @db.ObjectId
  gatewayAlias  String  @map("gateway_alias")
  minAmount     Float   @default(0.00) @map("min_amount") 
  maxAmount     Float   @default(0.00) @map("max_amount") 
  percentCharge Float   @default(0.00) @map("percent_charge") 
  fixedCharge   Float   @default(0.00) @map("fixed_charge") 
  rate          Float   @default(0.00) 
  image         String?
  gatewayParameter Json? @map("gateway_parameter")

  // Relations
  gateway       Gateway @relation(fields: [methodCode], references: [id])

  @@map("gateway_currencies")
}

model Deposit {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @map("user_id") @db.ObjectId
  orderId       String?   @unique @map("order_id") @db.ObjectId
  methodCode    Int       @map("method_code")
  amount        Float   
  methodCurrency String   @map("method_currency")
  charge        Float     @default(0.00) 
  rate          Float     @default(0.00) 
  finalAmount   Float     @map("final_amount") 
  detail        Json?
  btcAmount     String?   @map("btc_amount")
  btcWallet     String?   @map("btc_wallet")
  trx           String?   @unique
  paymentTry    Int       @default(0) @map("payment_try")
  status        Int       @default(0) 
  fromApi       Int       @default(0) @map("from_api") 
  adminFeedback String?   @map("admin_feedback")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  user          User      @relation(fields: [userId], references: [id])
  order         Order?    @relation(fields: [orderId], references: [id])

  @@map("deposits")
}

model Transaction {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @map("user_id") @db.ObjectId
  amount      Float   
  charge      Float     @default(0.00) 
  postBalance Float     @map("post_balance") 
  trxType     String    @map("trx_type") 
  trx         String    @unique
  details     String?
  remark      String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  user        User      @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model UserLogin {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @map("user_id") @db.ObjectId
  userIp     String   @map("user_ip")
  city       String?
  country    String?
  countryCode String? @map("country_code")
  longitude  String?
  latitude   String?
  browser    String?
  os         String?
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user       User     @relation(fields: [userId], references: [id])

  @@map("user_logins")
}

model GeneralSetting {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  key   String @unique
  value Json?

  @@map("general_settings")
}

model Page {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String
  tempname    String?
  description String?  
  isDefault   Int      @default(0) @map("is_default") 
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("pages")
}

model Language {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  code      String   @unique
  isDefault Int      @default(0) @map("is_default") 
  image     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("languages")
}

model Subscriber {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("subscribers")
}

model SupportTicket {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?  @map("user_id") @db.ObjectId
  name      String
  email     String
  ticket    String   @unique
  subject   String
  status    Int      @default(0) 
  priority  Int      @default(2) 
  lastReply DateTime @map("last_reply")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user      User?    @relation(fields: [userId], references: [id])
  messages  SupportMessage[]

  @@map("support_tickets")
}

model SupportMessage {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  supportTicketId String   @map("support_ticket_id") @db.ObjectId
  adminId         String?  @map("admin_id") @db.ObjectId
  message         String   
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  supportTicket   SupportTicket @relation(fields: [supportTicketId], references: [id])

  @@map("support_messages")
}